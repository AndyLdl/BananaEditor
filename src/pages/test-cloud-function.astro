---
// 云函数测试页面
import Layout from "../layouts/Layout.astro";
---

<Layout title="云函数测试">
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold mb-8 text-center">
        🍌 Banana AI 云函数测试
      </h1>

      <!-- 配置状态 -->
      <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
        <h2 class="text-xl font-semibold mb-4">📋 配置状态</h2>
        <div id="config-status" class="space-y-2">
          <div class="flex justify-between">
            <span>云函数 URL:</span>
            <span id="function-url" class="font-mono text-sm">检查中...</span>
          </div>
          <div class="flex justify-between">
            <span>项目 ID:</span>
            <span id="project-id" class="font-mono text-sm">检查中...</span>
          </div>
          <div class="flex justify-between">
            <span>配置状态:</span>
            <span id="config-valid" class="font-mono text-sm">检查中...</span>
          </div>
        </div>
      </div>

      <!-- 测试表单 -->
      <div class="bg-white border border-gray-200 rounded-lg p-6 mb-8">
        <h2 class="text-xl font-semibold mb-4">🧪 功能测试</h2>

        <form id="test-form" class="space-y-4">
          <div>
            <label
              for="test-prompt"
              class="block text-sm font-medium text-gray-700 mb-2">
              测试提示词
            </label>
            <textarea
              id="test-prompt"
              name="prompt"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="输入测试提示词，例如：一只可爱的橙色小猫坐在花园里"
            ></textarea>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label
                for="test-style"
                class="block text-sm font-medium text-gray-700 mb-2">
                风格
              </label>
              <select
                id="test-style"
                name="style"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="realistic">写实风格</option>
                <option value="artistic">艺术风格</option>
                <option value="cartoon">卡通风格</option>
                <option value="watercolor">水彩风格</option>
              </select>
            </div>

            <div>
              <label
                for="test-quality"
                class="block text-sm font-medium text-gray-700 mb-2">
                质量
              </label>
              <select
                id="test-quality"
                name="quality"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="standard">标准</option>
                <option value="high">高质量</option>
                <option value="ultra">超高质量</option>
              </select>
            </div>

            <div>
              <label
                for="test-creativity"
                class="block text-sm font-medium text-gray-700 mb-2">
                创意程度
              </label>
              <input
                type="range"
                id="test-creativity"
                name="creativity"
                min="0"
                max="100"
                value="50"
                class="w-full"
              />
              <div class="text-center text-sm text-gray-500">
                <span id="creativity-value">50</span>%
              </div>
            </div>
          </div>

          <div class="flex gap-4">
            <button
              type="submit"
              id="test-button"
              class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
              🚀 测试云函数
            </button>

            <button
              type="button"
              id="health-check-button"
              class="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500">
              🏥 健康检查
            </button>
          </div>
        </form>
      </div>

      <!-- 测试结果 -->
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">📊 测试结果</h2>
        <div id="test-results" class="space-y-4">
          <div class="text-gray-500 text-center py-8">
            点击测试按钮开始测试...
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // 云函数测试脚本
  class CloudFunctionTester {
    constructor() {
      // 优先使用Firebase云函数URL
      this.functionUrl =
        import.meta.env.PUBLIC_FIREBASE_FUNCTION_URL ||
        import.meta.env.PUBLIC_CLOUD_FUNCTION_URL ||
        "https://us-central1-bananaeditor-927be.cloudfunctions.net/bananaAIGenerator";
      this.init();
    }

    init() {
      this.checkConfiguration();
      this.bindEvents();
    }

    // 检查配置
    checkConfiguration() {
      const functionUrlElement = document.getElementById("function-url");
      const projectIdElement = document.getElementById("project-id");
      const configValidElement = document.getElementById("config-valid");

      if (functionUrlElement) {
        functionUrlElement.textContent = this.functionUrl || "未配置";
      }

      if (projectIdElement) {
        const projectId = import.meta.env.GOOGLE_CLOUD_PROJECT_ID;
        projectIdElement.textContent = projectId || "未配置";
      }

      if (configValidElement) {
        const isValid =
          this.functionUrl && !this.functionUrl.includes("your-project-id");
        configValidElement.textContent = isValid ? "✅ 已配置" : "❌ 需要配置";
        configValidElement.className = `font-mono text-sm ${isValid ? "text-green-600" : "text-red-600"}`;
      }
    }

    // 绑定事件
    bindEvents() {
      const testForm = document.getElementById("test-form");
      const healthCheckButton = document.getElementById("health-check-button");
      const creativitySlider = document.getElementById("test-creativity");
      const creativityValue = document.getElementById("creativity-value");

      if (testForm) {
        testForm.addEventListener("submit", (e) => {
          e.preventDefault();
          this.runTest();
        });
      }

      if (healthCheckButton) {
        healthCheckButton.addEventListener("click", () => {
          this.runHealthCheck();
        });
      }

      if (creativitySlider && creativityValue) {
        creativitySlider.addEventListener("input", (e) => {
          creativityValue.textContent = e.target.value;
        });
      }
    }

    // 显示结果
    showResult(title, content, type = "info") {
      const resultsContainer = document.getElementById("test-results");
      if (!resultsContainer) return;

      const resultElement = document.createElement("div");
      resultElement.className = `p-4 rounded-md border ${this.getResultClasses(type)}`;

      resultElement.innerHTML = `
        <div class="flex items-start gap-3">
          <div class="flex-shrink-0">
            ${this.getResultIcon(type)}
          </div>
          <div class="flex-1">
            <h3 class="font-semibold mb-2">${title}</h3>
            <div class="text-sm">${content}</div>
          </div>
          <div class="text-xs text-gray-500">
            ${new Date().toLocaleTimeString()}
          </div>
        </div>
      `;

      // 清空之前的结果或添加到顶部
      if (
        resultsContainer.children.length === 1 &&
        resultsContainer.children[0].textContent.includes("点击测试按钮")
      ) {
        resultsContainer.innerHTML = "";
      }

      resultsContainer.insertBefore(resultElement, resultsContainer.firstChild);
    }

    getResultClasses(type) {
      switch (type) {
        case "success":
          return "bg-green-50 border-green-200 text-green-800";
        case "error":
          return "bg-red-50 border-red-200 text-red-800";
        case "warning":
          return "bg-yellow-50 border-yellow-200 text-yellow-800";
        default:
          return "bg-blue-50 border-blue-200 text-blue-800";
      }
    }

    getResultIcon(type) {
      switch (type) {
        case "success":
          return "✅";
        case "error":
          return "❌";
        case "warning":
          return "⚠️";
        default:
          return "ℹ️";
      }
    }

    // 健康检查
    async runHealthCheck() {
      this.showResult("健康检查", "正在检查云函数状态...", "info");

      if (!this.functionUrl || this.functionUrl.includes("your-project-id")) {
        this.showResult(
          "健康检查失败",
          "云函数 URL 未正确配置。请运行: <code>npm run config:frontend</code>",
          "error"
        );
        return;
      }

      try {
        const startTime = Date.now();
        const response = await fetch(this.functionUrl, {
          method: "GET",
          headers: {
            "User-Agent": "CloudFunction-Tester/1.0",
          },
        });

        const responseTime = Date.now() - startTime;

        if (response.ok) {
          this.showResult(
            "健康检查成功",
            `云函数响应正常<br>
             状态码: ${response.status}<br>
             响应时间: ${responseTime}ms<br>
             URL: <code>${this.functionUrl}</code>`,
            "success"
          );
        } else {
          this.showResult(
            "健康检查警告",
            `云函数响应异常<br>
             状态码: ${response.status}<br>
             响应时间: ${responseTime}ms`,
            "warning"
          );
        }
      } catch (error) {
        this.showResult(
          "健康检查失败",
          `网络错误: ${error.message}<br>
           请检查云函数是否已部署`,
          "error"
        );
      }
    }

    // 运行功能测试
    async runTest() {
      const testButton = document.getElementById("test-button");
      const form = document.getElementById("test-form");

      if (!testButton || !form) return;

      // 禁用按钮
      testButton.disabled = true;
      testButton.textContent = "🔄 测试中...";

      this.showResult("功能测试", "正在测试加密 AI 图片生成功能...", "info");

      try {
        // 使用加密客户端进行测试
        const { SecureBananaAIProcessor } = await import(
          "../utils/secure-api-client.ts"
        );
        const secureProcessor = new SecureBananaAIProcessor(this.functionUrl);

        // 获取表单数据
        const formData = new FormData(form);
        const prompt = formData.get("prompt") as string;

        // 添加请求ID
        const requestId = `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

        const startTime = Date.now();

        // 使用加密客户端调用
        const responseData = await secureProcessor.callCloudFunction(
          prompt,
          []
        );

        const responseTime = Date.now() - startTime;

        if (responseData.success) {
          this.showResult(
            "功能测试成功",
            `AI 生成功能正常<br>
             请求ID: <code>${responseData.data?.metadata?.requestId || requestId}</code><br>
             处理时间: ${responseData.data?.metadata?.processingTime || responseTime}ms<br>
             使用模型: ${responseData.data?.metadata?.model || "unknown"}<br>
             生成内容长度: ${responseData.data?.generatedPrompt?.length || 0} 字符<br>
             建议数量: ${responseData.data?.suggestions?.length || 0} 个`,
            "success"
          );

          // 显示生成的内容
          if (responseData.data?.generatedPrompt) {
            this.showResult(
              "生成内容预览",
              `<div class="bg-gray-100 p-3 rounded text-sm">
                ${responseData.data.generatedPrompt.substring(0, 200)}${responseData.data.generatedPrompt.length > 200 ? "..." : ""}
               </div>`,
              "info"
            );
          }
        } else {
          this.showResult(
            "功能测试失败",
            `错误信息: ${responseData.error?.message || "未知错误"}<br>
             错误代码: ${responseData.error?.code || "UNKNOWN"}<br>
             响应时间: ${responseTime}ms`,
            "error"
          );
        }
      } catch (error) {
        this.showResult(
          "功能测试异常",
          `网络错误: ${error.message}<br>
           请检查云函数配置和网络连接`,
          "error"
        );
      } finally {
        // 恢复按钮
        testButton.disabled = false;
        testButton.textContent = "🚀 测试云函数";
      }
    }
  }

  // 初始化测试器
  document.addEventListener("DOMContentLoaded", () => {
    new CloudFunctionTester();
  });
</script>

<style>
  code {
    background-color: rgba(0, 0, 0, 0.1);
    padding: 2px 4px;
    border-radius: 3px;
    font-family: "Courier New", monospace;
    font-size: 0.9em;
  }
</style>
