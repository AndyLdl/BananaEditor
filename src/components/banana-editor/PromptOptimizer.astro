---
// BananaEditor 提示词优化组件
// 提供提示词优化功能，包含优化按钮和弹出面板

export interface Props {
  className?: string;
  initialPrompt?: string;
  language?: string;
  onOptimized?: (optimizedPrompt: string) => void;
}

const {
  className = "",
  initialPrompt = "",
  language = "zh",
  onOptimized,
} = Astro.props;
---

<div class={`prompt-optimizer ${className}`} id="prompt-optimizer">
  <!-- 优化按钮 -->
  <button
    class="optimize-trigger-btn"
    id="optimize-trigger"
    title="优化提示词"
    data-initial-prompt={initialPrompt}>
    <span class="btn-icon">🚀</span>
    <span class="btn-text">优化</span>
    <div class="btn-loading" style="display: none;">
      <div class="loading-spinner"></div>
    </div>
  </button>

  <!-- 优化面板弹窗 -->
  <div class="optimizer-modal" id="optimizer-modal" style="display: none;">
    <div class="modal-backdrop" id="modal-backdrop"></div>
    <div class="modal-content">
      <!-- 模态框头部 -->
      <div class="modal-header">
        <div class="header-info">
          <div class="header-icon">✨</div>
          <div class="header-text">
            <h3 class="modal-title">提示词优化</h3>
            <p class="modal-subtitle">AI将帮您优化提示词以获得更好的效果</p>
          </div>
        </div>
        <button class="close-btn" id="close-modal" title="关闭">
          <span class="icon">✕</span>
        </button>
      </div>

      <!-- 模态框主体 -->
      <div class="modal-body">
        <!-- 原始提示词区域 -->
        <div class="prompt-section">
          <div class="section-header">
            <h4 class="section-title">
              <span class="title-icon">📝</span>
              原始提示词
            </h4>
            <span class="char-count" id="original-char-count">0 字符</span>
          </div>
          <div class="prompt-container">
            <textarea
              id="original-prompt"
              class="prompt-textarea original"
              placeholder="请输入您的提示词..."
              rows="4"
              readonly></textarea>
          </div>
        </div>

        <!-- 优化后提示词区域 -->
        <div class="prompt-section">
          <div class="section-header">
            <h4 class="section-title">
              <span class="title-icon">✨</span>
              优化后提示词
            </h4>
            <div class="section-actions">
              <span class="char-count" id="optimized-char-count">0 字符</span>
              <button
                class="copy-btn"
                id="copy-optimized"
                title="复制优化后的提示词">
                <span class="icon">📋</span>
              </button>
            </div>
          </div>
          <div class="prompt-container">
            <textarea
              id="optimized-prompt"
              class="prompt-textarea optimized"
              placeholder="优化后的提示词将显示在这里..."
              rows="4"></textarea>
            <div class="optimization-status" id="optimization-status">
              <div class="status-loading" style="display: none;">
                <div class="status-spinner"></div>
                <span>AI正在优化中...</span>
              </div>
              <div class="status-success" style="display: none;">
                <span class="status-icon">✅</span>
                <span>优化完成</span>
              </div>
              <div class="status-error" style="display: none;">
                <span class="status-icon">❌</span>
                <span>优化失败，请重试</span>
              </div>
            </div>
          </div>
        </div>

        <!-- 优化建议区域 -->
        <div
          class="suggestions-section"
          id="suggestions-section"
          style="display: none;">
          <div class="section-header">
            <h4 class="section-title">
              <span class="title-icon">💡</span>
              优化建议
            </h4>
          </div>
          <div class="suggestions-list" id="suggestions-list">
            <!-- 建议项将通过JavaScript动态添加 -->
          </div>
        </div>

        <!-- 对比分析区域 -->
        <div
          class="comparison-section"
          id="comparison-section"
          style="display: none;">
          <div class="section-header">
            <h4 class="section-title">
              <span class="title-icon">📊</span>
              对比分析
            </h4>
          </div>
          <div class="comparison-grid">
            <div class="comparison-item">
              <div class="comparison-label">字符数</div>
              <div class="comparison-values">
                <span class="original-value" id="original-length">0</span>
                <span class="arrow">→</span>
                <span class="optimized-value" id="optimized-length">0</span>
              </div>
            </div>
            <div class="comparison-item">
              <div class="comparison-label">关键词密度</div>
              <div class="comparison-values">
                <span class="original-value" id="original-keywords">低</span>
                <span class="arrow">→</span>
                <span class="optimized-value" id="optimized-keywords">高</span>
              </div>
            </div>
            <div class="comparison-item">
              <div class="comparison-label">描述详细度</div>
              <div class="comparison-values">
                <span class="original-value" id="original-detail">简单</span>
                <span class="arrow">→</span>
                <span class="optimized-value" id="optimized-detail">详细</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- 模态框底部操作 -->
      <div class="modal-footer">
        <div class="footer-actions">
          <button class="action-btn secondary" id="retry-optimization">
            <span class="btn-icon">🔄</span>
            <span class="btn-text">重新优化</span>
          </button>
          <button class="action-btn secondary" id="edit-manually">
            <span class="btn-icon">✏️</span>
            <span class="btn-text">手动编辑</span>
          </button>
          <button class="action-btn primary" id="apply-optimization" disabled>
            <span class="btn-icon">✅</span>
            <span class="btn-text">应用优化</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* 提示词优化组件样式 */
  .prompt-optimizer {
    position: relative;
    display: inline-block;
  }

  /* 优化触发按钮 */
  .optimize-trigger-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 8px 12px;
    border: 1px solid var(--banana-primary, #ffd700);
    background: transparent;
    color: var(--banana-dark, #2d1810);
    border-radius: 6px;
    cursor: pointer;
    font-size: 12px;
    font-weight: 500;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .optimize-trigger-btn:hover:not(:disabled) {
    background: var(--banana-primary, #ffd700);
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(255, 215, 0, 0.3);
  }

  .optimize-trigger-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .optimize-trigger-btn .btn-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .loading-spinner {
    width: 14px;
    height: 14px;
    border: 2px solid rgba(45, 24, 16, 0.3);
    border-top: 2px solid var(--banana-dark, #2d1810);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* 优化面板模态框 */
  .optimizer-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .modal-content {
    position: relative;
    width: 100%;
    max-width: 800px;
    max-height: 90vh;
    background: white;
    border-radius: 16px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  /* 模态框头部 */
  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 24px;
    background: var(
      --banana-gradient,
      linear-gradient(135deg, #ffd700 0%, #ffa500 100%)
    );
    border-bottom: 1px solid var(--banana-border, #ffe55c);
  }

  .header-info {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .header-icon {
    font-size: 32px;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
  }

  .header-text {
    flex: 1;
  }

  .modal-title {
    margin: 0 0 4px 0;
    font-size: 20px;
    font-weight: 700;
    color: var(--banana-dark, #2d1810);
  }

  .modal-subtitle {
    margin: 0;
    font-size: 14px;
    color: var(--banana-dark, #2d1810);
    opacity: 0.8;
  }

  .close-btn {
    width: 32px;
    height: 32px;
    border: none;
    background: rgba(45, 24, 16, 0.1);
    color: var(--banana-dark, #2d1810);
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    transition: all 0.2s ease;
  }

  .close-btn:hover {
    background: rgba(45, 24, 16, 0.2);
    transform: scale(1.1);
  }

  /* 模态框主体 */
  .modal-body {
    flex: 1;
    padding: 24px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  /* 提示词区域 */
  .prompt-section {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .section-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .section-title {
    display: flex;
    align-items: center;
    gap: 8px;
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    color: var(--banana-dark, #2d1810);
  }

  .title-icon {
    font-size: 18px;
  }

  .section-actions {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .char-count {
    font-size: 12px;
    color: #666;
    font-weight: 500;
  }

  .copy-btn {
    width: 28px;
    height: 28px;
    border: 1px solid #ddd;
    background: white;
    color: #666;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    transition: all 0.2s ease;
  }

  .copy-btn:hover {
    border-color: var(--banana-primary, #ffd700);
    background: rgba(255, 248, 220, 0.5);
    color: var(--banana-dark, #2d1810);
  }

  .prompt-container {
    position: relative;
  }

  .prompt-textarea {
    width: 100%;
    padding: 16px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 14px;
    line-height: 1.5;
    resize: vertical;
    min-height: 100px;
    font-family: inherit;
    transition: border-color 0.2s ease;
  }

  .prompt-textarea:focus {
    outline: none;
    border-color: var(--banana-primary, #ffd700);
    box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.1);
  }

  .prompt-textarea.original {
    background: #f9f9f9;
    color: #666;
  }

  .prompt-textarea.optimized {
    border-color: var(--banana-secondary, #ffa500);
    background: rgba(255, 248, 220, 0.3);
  }

  .optimization-status {
    position: absolute;
    bottom: 12px;
    right: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 12px;
    font-weight: 500;
  }

  .status-loading {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #666;
  }

  .status-spinner {
    width: 12px;
    height: 12px;
    border: 1px solid rgba(102, 102, 102, 0.3);
    border-top: 1px solid #666;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .status-success {
    display: flex;
    align-items: center;
    gap: 4px;
    color: #10b981;
  }

  .status-error {
    display: flex;
    align-items: center;
    gap: 4px;
    color: #dc2626;
  }

  .status-icon {
    font-size: 14px;
  }

  /* 建议区域 */
  .suggestions-section {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .suggestions-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .suggestion-item {
    padding: 12px 16px;
    background: rgba(255, 248, 220, 0.5);
    border: 1px solid rgba(255, 215, 0, 0.3);
    border-radius: 8px;
    font-size: 14px;
    line-height: 1.4;
    color: var(--banana-dark, #2d1810);
  }

  .suggestion-item .suggestion-type {
    font-weight: 600;
    color: var(--banana-secondary, #ffa500);
    margin-bottom: 4px;
  }

  /* 对比分析区域 */
  .comparison-section {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .comparison-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 16px;
  }

  .comparison-item {
    padding: 16px;
    background: #f9f9f9;
    border-radius: 8px;
    text-align: center;
  }

  .comparison-label {
    font-size: 12px;
    font-weight: 500;
    color: #666;
    margin-bottom: 8px;
  }

  .comparison-values {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-size: 14px;
    font-weight: 600;
  }

  .original-value {
    color: #666;
  }

  .arrow {
    color: var(--banana-secondary, #ffa500);
    font-weight: 700;
  }

  .optimized-value {
    color: var(--banana-accent, #ff6b35);
  }

  /* 模态框底部 */
  .modal-footer {
    padding: 20px 24px;
    background: #f9f9f9;
    border-top: 1px solid #e5e7eb;
  }

  .footer-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .action-btn.secondary {
    background: white;
    color: #666;
    border: 1px solid #ddd;
  }

  .action-btn.secondary:hover {
    border-color: #999;
    color: #333;
    transform: translateY(-1px);
  }

  .action-btn.primary {
    background: var(
      --banana-gradient,
      linear-gradient(135deg, #ffd700 0%, #ffa500 100%)
    );
    color: var(--banana-dark, #2d1810);
    box-shadow: 0 2px 8px rgba(255, 215, 0, 0.3);
  }

  .action-btn.primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 215, 0, 0.4);
  }

  .action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .btn-icon {
    font-size: 16px;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .optimizer-modal {
      padding: 10px;
    }

    .modal-content {
      max-height: 95vh;
    }

    .modal-header {
      padding: 20px;
    }

    .modal-title {
      font-size: 18px;
    }

    .modal-body {
      padding: 20px;
      gap: 20px;
    }

    .comparison-grid {
      grid-template-columns: 1fr;
    }

    .footer-actions {
      flex-direction: column;
    }

    .action-btn {
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .modal-header {
      padding: 16px;
    }

    .header-info {
      gap: 12px;
    }

    .header-icon {
      font-size: 24px;
    }

    .modal-title {
      font-size: 16px;
    }

    .modal-subtitle {
      font-size: 12px;
    }

    .modal-body {
      padding: 16px;
    }

    .section-title {
      font-size: 14px;
    }

    .prompt-textarea {
      padding: 12px;
      font-size: 13px;
    }
  }

  /* 高对比度模式支持 */
  @media (prefers-contrast: high) {
    .optimize-trigger-btn {
      border-color: #000;
    }

    .prompt-textarea {
      border-color: #000;
    }

    .action-btn.secondary {
      border-color: #000;
    }
  }

  /* 减少动画偏好支持 */
  @media (prefers-reduced-motion: reduce) {
    * {
      transition: none !important;
      animation: none !important;
    }
  }
</style>

<script>
  // 提示词优化器交互逻辑
  class PromptOptimizer {
    private triggerBtn: HTMLButtonElement | null = null;
    private modal: HTMLElement | null = null;
    private modalBackdrop: HTMLElement | null = null;
    private closeBtn: HTMLButtonElement | null = null;
    private originalTextarea: HTMLTextAreaElement | null = null;
    private optimizedTextarea: HTMLTextAreaElement | null = null;
    private applyBtn: HTMLButtonElement | null = null;
    private retryBtn: HTMLButtonElement | null = null;
    private editBtn: HTMLButtonElement | null = null;
    private copyBtn: HTMLButtonElement | null = null;

    private originalPrompt: string = "";
    private optimizedPrompt: string = "";
    private isOptimizing: boolean = false;
    private language: string = "zh";

    constructor() {
      this.init();
    }

    private init(): void {
      this.bindElements();
      this.setupEventListeners();
      this.loadInitialPrompt();
    }

    private bindElements(): void {
      this.triggerBtn = document.getElementById(
        "optimize-trigger",
      ) as HTMLButtonElement;
      this.modal = document.getElementById("optimizer-modal");
      this.modalBackdrop = document.getElementById("modal-backdrop");
      this.closeBtn = document.getElementById(
        "close-modal",
      ) as HTMLButtonElement;
      this.originalTextarea = document.getElementById(
        "original-prompt",
      ) as HTMLTextAreaElement;
      this.optimizedTextarea = document.getElementById(
        "optimized-prompt",
      ) as HTMLTextAreaElement;
      this.applyBtn = document.getElementById(
        "apply-optimization",
      ) as HTMLButtonElement;
      this.retryBtn = document.getElementById(
        "retry-optimization",
      ) as HTMLButtonElement;
      this.editBtn = document.getElementById(
        "edit-manually",
      ) as HTMLButtonElement;
      this.copyBtn = document.getElementById(
        "copy-optimized",
      ) as HTMLButtonElement;
    }

    private setupEventListeners(): void {
      // 触发优化
      this.triggerBtn?.addEventListener("click", () => {
        this.openModal();
      });

      // 关闭模态框
      this.closeBtn?.addEventListener("click", () => {
        this.closeModal();
      });

      this.modalBackdrop?.addEventListener("click", () => {
        this.closeModal();
      });

      // ESC键关闭
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.modal?.style.display !== "none") {
          this.closeModal();
        }
      });

      // 操作按钮
      this.applyBtn?.addEventListener("click", () => {
        this.applyOptimization();
      });

      this.retryBtn?.addEventListener("click", () => {
        this.retryOptimization();
      });

      this.editBtn?.addEventListener("click", () => {
        this.enableManualEdit();
      });

      this.copyBtn?.addEventListener("click", () => {
        this.copyOptimizedPrompt();
      });

      // 监听优化后文本变化
      this.optimizedTextarea?.addEventListener("input", () => {
        this.updateApplyButton();
        this.updateCharacterCount();
      });
    }

    private loadInitialPrompt(): void {
      const initialPrompt = this.triggerBtn?.dataset.initialPrompt || "";
      this.originalPrompt = initialPrompt;

      // 监听外部提示词更新事件
      document.addEventListener("updatePromptOptimizer", (e: any) => {
        if (e.detail && e.detail.prompt) {
          this.originalPrompt = e.detail.prompt;
        }
      });
    }

    public setPrompt(prompt: string): void {
      this.originalPrompt = prompt;
      if (this.originalTextarea) {
        this.originalTextarea.value = prompt;
        this.updateCharacterCount();
      }
    }

    private openModal(): void {
      if (!this.modal) return;

      // 获取当前页面的提示词
      this.getCurrentPrompt();

      // 设置原始提示词
      if (this.originalTextarea) {
        this.originalTextarea.value = this.originalPrompt;
      }

      // 清空优化结果
      if (this.optimizedTextarea) {
        this.optimizedTextarea.value = "";
      }

      // 显示模态框
      this.modal.style.display = "flex";
      document.body.style.overflow = "hidden";

      // 更新字符计数
      this.updateCharacterCount();

      // 自动开始优化
      setTimeout(() => {
        this.startOptimization();
      }, 300);
    }

    private closeModal(): void {
      if (!this.modal) return;

      this.modal.style.display = "none";
      document.body.style.overflow = "";

      // 重置状态
      this.hideAllStatus();
      this.hideSections();
    }

    private async startOptimization(): void {
      if (this.isOptimizing || !this.originalPrompt.trim()) return;

      this.isOptimizing = true;
      this.showOptimizingStatus();
      this.disableButtons();

      try {
        const response = await fetch("/api/banana-editor/optimize-prompt", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            prompt: this.originalPrompt,
            language: this.language,
          }),
        });

        if (!response.ok) {
          throw new Error(`优化失败: ${response.status}`);
        }

        const result = await response.json();

        if (result.success) {
          this.optimizedPrompt = result.optimizedPrompt;
          this.showOptimizationResult(result);
        } else {
          throw new Error(result.error || "优化失败");
        }
      } catch (error) {
        console.error("提示词优化错误:", error);
        this.showOptimizationError(
          error instanceof Error ? error.message : "优化失败",
        );
      } finally {
        this.isOptimizing = false;
        this.enableButtons();
      }
    }

    private showOptimizationResult(result: any): void {
      // 显示优化后的提示词
      if (this.optimizedTextarea) {
        this.optimizedTextarea.value = result.optimizedPrompt;
      }

      // 显示成功状态
      this.showSuccessStatus();

      // 显示建议和对比
      if (result.suggestions) {
        this.showSuggestions(result.suggestions);
      }

      this.showComparison();
      this.updateCharacterCount();
      this.updateApplyButton();
    }

    private showOptimizationError(message: string): void {
      this.showErrorStatus(message);
    }

    private showOptimizingStatus(): void {
      this.hideAllStatus();
      const loadingStatus = document.querySelector(
        ".status-loading",
      ) as HTMLElement;
      if (loadingStatus) {
        loadingStatus.style.display = "flex";
      }
    }

    private showSuccessStatus(): void {
      this.hideAllStatus();
      const successStatus = document.querySelector(
        ".status-success",
      ) as HTMLElement;
      if (successStatus) {
        successStatus.style.display = "flex";
      }
    }

    private showErrorStatus(message: string): void {
      this.hideAllStatus();
      const errorStatus = document.querySelector(
        ".status-error",
      ) as HTMLElement;
      if (errorStatus) {
        errorStatus.style.display = "flex";
        const errorText = errorStatus.querySelector("span:last-child");
        if (errorText) {
          errorText.textContent = message;
        }
      }
    }

    private hideAllStatus(): void {
      const statuses = document.querySelectorAll(".optimization-status > div");
      statuses.forEach((status) => {
        (status as HTMLElement).style.display = "none";
      });
    }

    private showSuggestions(suggestions: string[]): void {
      const suggestionsSection = document.getElementById("suggestions-section");
      const suggestionsList = document.getElementById("suggestions-list");

      if (!suggestionsSection || !suggestionsList) return;

      // 清空现有建议
      suggestionsList.innerHTML = "";

      // 添加新建议
      suggestions.forEach((suggestion) => {
        const suggestionItem = document.createElement("div");
        suggestionItem.className = "suggestion-item";
        suggestionItem.innerHTML = `
          <div class="suggestion-type">优化建议</div>
          <div>${suggestion}</div>
        `;
        suggestionsList.appendChild(suggestionItem);
      });

      suggestionsSection.style.display = "flex";
    }

    private showComparison(): void {
      const comparisonSection = document.getElementById("comparison-section");
      if (!comparisonSection) return;

      // 更新对比数据
      this.updateComparisonData();
      comparisonSection.style.display = "flex";
    }

    private updateComparisonData(): void {
      const originalLength = document.getElementById("original-length");
      const optimizedLength = document.getElementById("optimized-length");
      const originalKeywords = document.getElementById("original-keywords");
      const optimizedKeywords = document.getElementById("optimized-keywords");
      const originalDetail = document.getElementById("original-detail");
      const optimizedDetail = document.getElementById("optimized-detail");

      if (originalLength) {
        originalLength.textContent = this.originalPrompt.length.toString();
      }

      if (optimizedLength) {
        optimizedLength.textContent = this.optimizedPrompt.length.toString();
      }

      // 简单的关键词密度分析
      const originalKeywordCount = this.countKeywords(this.originalPrompt);
      const optimizedKeywordCount = this.countKeywords(this.optimizedPrompt);

      if (originalKeywords) {
        originalKeywords.textContent =
          originalKeywordCount > 3
            ? "高"
            : originalKeywordCount > 1
              ? "中"
              : "低";
      }

      if (optimizedKeywords) {
        optimizedKeywords.textContent =
          optimizedKeywordCount > 3
            ? "高"
            : optimizedKeywordCount > 1
              ? "中"
              : "低";
      }

      // 详细度分析
      if (originalDetail) {
        originalDetail.textContent =
          this.originalPrompt.length > 100
            ? "详细"
            : this.originalPrompt.length > 50
              ? "中等"
              : "简单";
      }

      if (optimizedDetail) {
        optimizedDetail.textContent =
          this.optimizedPrompt.length > 100
            ? "详细"
            : this.optimizedPrompt.length > 50
              ? "中等"
              : "简单";
      }
    }

    private countKeywords(text: string): number {
      // 简单的关键词计数逻辑
      const keywords = [
        "高质量",
        "4K",
        "细节",
        "风格",
        "色彩",
        "光线",
        "构图",
        "艺术",
      ];
      return keywords.filter((keyword) => text.includes(keyword)).length;
    }

    private hideSections(): void {
      const sections = ["suggestions-section", "comparison-section"];
      sections.forEach((sectionId) => {
        const section = document.getElementById(sectionId);
        if (section) {
          section.style.display = "none";
        }
      });
    }

    private updateCharacterCount(): void {
      const originalCount = document.getElementById("original-char-count");
      const optimizedCount = document.getElementById("optimized-char-count");

      if (originalCount && this.originalTextarea) {
        originalCount.textContent = `${this.originalTextarea.value.length} 字符`;
      }

      if (optimizedCount && this.optimizedTextarea) {
        optimizedCount.textContent = `${this.optimizedTextarea.value.length} 字符`;
      }
    }

    private updateApplyButton(): void {
      if (!this.applyBtn || !this.optimizedTextarea) return;

      const hasOptimizedText = this.optimizedTextarea.value.trim().length > 0;
      this.applyBtn.disabled = !hasOptimizedText;
    }

    private disableButtons(): void {
      const buttons = [this.applyBtn, this.retryBtn, this.editBtn];
      buttons.forEach((btn) => {
        if (btn) btn.disabled = true;
      });
    }

    private enableButtons(): void {
      const buttons = [this.retryBtn, this.editBtn];
      buttons.forEach((btn) => {
        if (btn) btn.disabled = false;
      });
      this.updateApplyButton();
    }

    private retryOptimization(): void {
      this.startOptimization();
    }

    private enableManualEdit(): void {
      if (this.optimizedTextarea) {
        this.optimizedTextarea.readOnly = false;
        this.optimizedTextarea.focus();
        this.optimizedTextarea.style.borderColor =
          "var(--banana-accent, #ff6b35)";
      }
    }

    private async copyOptimizedPrompt(): void {
      if (!this.optimizedTextarea) return;

      try {
        await navigator.clipboard.writeText(this.optimizedTextarea.value);

        // 显示复制成功提示
        const originalIcon = this.copyBtn?.querySelector(".icon");
        if (originalIcon) {
          originalIcon.textContent = "✅";
          setTimeout(() => {
            originalIcon.textContent = "📋";
          }, 2000);
        }
      } catch (error) {
        console.error("复制失败:", error);
      }
    }

    private applyOptimization(): void {
      if (!this.optimizedTextarea) return;

      const optimizedText = this.optimizedTextarea.value.trim();
      if (!optimizedText) return;

      // 触发自定义事件，通知父组件
      const event = new CustomEvent("promptOptimized", {
        detail: {
          originalPrompt: this.originalPrompt,
          optimizedPrompt: optimizedText,
        },
      });

      document.dispatchEvent(event);

      // 关闭模态框
      this.closeModal();
    }

    // 获取当前页面的提示词
    private getCurrentPrompt(): void {
      // 尝试从生成器获取提示词
      const generatorTextarea = document.getElementById(
        "prompt-textarea",
      ) as HTMLTextAreaElement;
      if (generatorTextarea && generatorTextarea.value.trim()) {
        this.originalPrompt = generatorTextarea.value.trim();
        return;
      }

      // 尝试从融合器获取提示词
      const fusionTextarea = document.getElementById(
        "fusion-prompt-textarea",
      ) as HTMLTextAreaElement;
      if (fusionTextarea && fusionTextarea.value.trim()) {
        this.originalPrompt = fusionTextarea.value.trim();
        return;
      }

      // 如果都没有，使用初始提示词
      if (!this.originalPrompt) {
        this.originalPrompt = "请输入您的提示词";
      }
    }

    // 公共方法：供外部调用
    public updatePrompt(prompt: string): void {
      this.setPrompt(prompt);
    }

    public getOptimizedPrompt(): string {
      return this.optimizedPrompt;
    }
  }

  // 初始化提示词优化器
  document.addEventListener("DOMContentLoaded", () => {
    new PromptOptimizer();
  });
</script>
