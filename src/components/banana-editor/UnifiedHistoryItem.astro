---
// BananaEditor 统一历史项目组件
// 既可以作为缩略图显示，也可以显示详细信息

export interface Props {
  className?: string;
  mode?: "thumbnail" | "detailed";
}

const { className = "", mode = "thumbnail" } = Astro.props;
---

<div class={`unified-history-item ${className}`} id="unified-history-item">
  <!-- 历史记录容器 -->
  <div id="history-list" class="history-list"></div>

  <!-- 空状态提示 -->
  <div id="history-empty" class="history-empty" style="display: none;">
    <div class="empty-content">
      <svg
        width="48"
        height="48"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="1.5">
        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
        <circle cx="8.5" cy="8.5" r="1.5"></circle>
        <polyline points="21,15 16,10 5,21"></polyline>
      </svg>
      <p>No images generated yet</p>
      <p class="empty-subtitle">Start creating amazing images with AI</p>
    </div>
  </div>

  <!-- 统一历史项目模板 -->
  <template id="unified-history-item-template">
    <div class="history-item" data-id="" data-mode="thumbnail">
      <!-- 图片区域 -->
      <div class="item-image">
        <img src="" alt="History image" />
        <div class="item-overlay">
          <button class="overlay-btn view-btn" title="View large image">
            <svg
              class="btn-icon"
              width="14"
              height="14"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="M21 21l-4.35-4.35"></path>
            </svg>
          </button>
          <button class="overlay-btn use-btn" title="Use this image">
            <svg
              class="btn-icon"
              width="14"
              height="14"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2">
              <polyline points="20,6 9,17 4,12"></polyline>
            </svg>
          </button>
          <button class="overlay-btn delete-btn" title="Delete">
            <svg
              class="btn-icon"
              width="14"
              height="14"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2">
              <polyline points="3,6 5,6 21,6"></polyline>
              <path
                d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"
              ></path>
            </svg>
          </button>
        </div>
        <div class="item-status current" style="display: none;"></div>
      </div>

      <!-- 详细信息区域（可选显示） -->
      <div class="item-details">
        <div class="item-prompt">
          <span class="prompt-text"></span>
        </div>
        <div class="item-meta">
          <span class="meta-time"></span>
          <span class="meta-size"></span>
        </div>
        <div class="item-actions">
          <button class="action-btn primary use-btn-detailed">
            <svg
              class="btn-icon"
              width="12"
              height="12"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2">
              <polyline points="20,6 9,17 4,12"></polyline>
            </svg>
            <span class="btn-text">Use</span>
          </button>
          <button class="action-btn secondary more-btn">
            <svg
              class="btn-icon"
              width="12"
              height="12"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2">
              <circle cx="12" cy="12" r="1"></circle>
              <circle cx="19" cy="12" r="1"></circle>
              <circle cx="5" cy="12" r="1"></circle>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </template>
</div>

<style>
  /* 统一历史项目组件样式 */
  .unified-history-item {
    width: 100%;
    height: 100%;
  }

  /* 历史记录容器 */
  .history-list {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    padding: 16px;
    min-height: 200px;
    overflow-y: auto;
  }

  /* 空状态样式 */
  .history-empty {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 200px;
    color: #666;
    text-align: center;
  }

  .empty-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px;
  }

  .empty-content svg {
    opacity: 0.5;
  }

  .empty-content p {
    margin: 0;
    font-size: 16px;
    font-weight: 500;
  }

  .empty-subtitle {
    font-size: 14px;
    opacity: 0.7;
  }

  /* 基础历史项目样式 */
  .history-item {
    position: relative;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 8px;
    overflow: hidden;
    border: 2px solid transparent;
    background: white;
    display: flex;
    flex-direction: column;
  }

  .history-item:hover {
    border-color: #ffd700;
    box-shadow: 0 4px 12px rgba(255, 215, 0, 0.3);
  }

  .history-item.current {
    border-color: #ffd700;
    box-shadow: 0 2px 8px rgba(255, 215, 0, 0.4);
  }

  /* 缩略图模式 */
  .history-item[data-mode="thumbnail"] {
    width: 150px;
    height: 150px;
    flex-shrink: 0;
  }

  .history-item[data-mode="thumbnail"]:hover {
    transform: scale(1.05);
  }

  .history-item[data-mode="thumbnail"] .item-details {
    display: none;
  }

  /* 详细模式 */
  .history-item[data-mode="detailed"] {
    width: 100%;
    min-height: 120px;
    flex-direction: row;
    gap: 12px;
    padding: 12px;
    margin-bottom: 12px;
  }

  .history-item[data-mode="detailed"]:hover {
    transform: translateY(-2px);
  }

  .history-item[data-mode="detailed"] .item-image {
    width: 96px;
    height: 96px;
    flex-shrink: 0;
  }

  .history-item[data-mode="detailed"] .item-details {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 8px;
    min-width: 0;
  }

  /* 图片区域 */
  .item-image {
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: 6px;
    overflow: hidden;
    background: #f3f4f6;
    border: 1px solid #e5e7eb;
  }

  .item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* 悬停操作按钮 */
  .item-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(0, 0, 0, 0.7) 0%,
      rgba(0, 0, 0, 0.5) 100%
    );
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 6px;
  }

  .history-item:hover .item-overlay {
    opacity: 1;
  }

  .overlay-btn {
    width: 36px;
    height: 36px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    color: #64748b;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    position: relative;
    overflow: hidden;
  }

  .overlay-btn::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 215, 0, 0.3),
      transparent
    );
    transition: left 0.5s ease;
  }

  .overlay-btn:hover::before {
    left: 100%;
  }

  .overlay-btn:hover {
    background: rgba(255, 248, 220, 0.98);
    border-color: #ffd700;
    color: #2d1810;
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 4px 12px rgba(255, 215, 0, 0.4);
  }

  .overlay-btn:active {
    transform: translateY(0) scale(1);
  }

  .overlay-btn.delete-btn:hover {
    background: rgba(254, 226, 226, 0.98);
    border-color: #ef4444;
    color: #dc2626;
  }

  /* 缩略图模式的overlay调整 */
  .history-item[data-mode="thumbnail"] .overlay-btn {
    width: 28px;
    height: 28px;
  }

  .history-item[data-mode="thumbnail"] .overlay-btn .btn-icon {
    width: 12px;
    height: 12px;
  }

  .history-item[data-mode="thumbnail"] .item-overlay {
    gap: 8px;
  }

  /* 当前选中状态指示器 */
  .item-status {
    position: absolute;
    top: 6px;
    left: 6px;
    width: 10px;
    height: 10px;
    background: #ffd700;
    border: 2px solid white;
    border-radius: 50%;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }

  /* 详细信息区域 */
  .item-details {
    display: none;
  }

  .item-prompt {
    flex: 1;
    font-size: 14px;
    line-height: 1.4;
    color: #374151;
    overflow: hidden;
  }

  .prompt-text {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .item-meta {
    display: flex;
    gap: 12px;
    font-size: 12px;
    color: #6b7280;
  }

  .item-actions {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 4px;
    padding: 6px 12px;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    cursor: pointer;
    font-size: 12px;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .action-btn.primary {
    background: linear-gradient(135deg, #ffd700 0%, #ffa500 100%);
    border-color: #ffd700;
    color: #2d1810;
  }

  .action-btn.primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(255, 215, 0, 0.3);
  }

  .action-btn.secondary {
    background: white;
    color: #6b7280;
    width: 32px;
    height: 32px;
    padding: 0;
    justify-content: center;
  }

  .action-btn.secondary:hover {
    border-color: #ffd700;
    background: rgba(255, 248, 220, 0.5);
  }

  .btn-icon {
    width: 14px;
    height: 14px;
    flex-shrink: 0;
  }

  .btn-text {
    font-size: 11px;
  }

  /* 响应式调整 */
  @media (max-width: 768px) {
    .history-item[data-mode="detailed"] {
      flex-direction: column;
      gap: 8px;
    }

    .history-item[data-mode="detailed"] .item-image {
      width: 100%;
      height: 120px;
    }

    .item-actions {
      flex-direction: column;
      gap: 6px;
    }

    .action-btn {
      width: 100%;
      justify-content: center;
    }

    .action-btn.secondary {
      width: 100%;
    }
  }
</style>

<script>
  // 统一历史管理类
  class UnifiedHistoryManager {
    galleryScroll: HTMLElement | null = null;
    galleryEmpty: HTMLElement | null = null;
    template: HTMLTemplateElement | null = null;
    items: any[] = [];
    currentId: string | null = null;
    displayMode: string = "thumbnail";

    constructor() {
      this.galleryScroll = null;
      this.galleryEmpty = null;
      this.template = null;
      this.items = [];
      this.currentId = null;
      this.displayMode = "thumbnail"; // 'thumbnail' 或 'detailed'

      // 延迟初始化，确保DOM准备好
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () =>
          this.initializeElements()
        );
      } else {
        this.initializeElements();
      }
    }

    initializeElements() {
      this.galleryScroll = document.getElementById("history-list");
      this.galleryEmpty = document.getElementById("history-empty");
      this.template = document.getElementById(
        "unified-history-item-template"
      ) as HTMLTemplateElement;

      if (!this.galleryScroll) {
        console.warn("history-list element not found, retrying...");
        setTimeout(() => this.initializeElements(), 100);
        return;
      }

      this.init();
    }

    init() {
      // 监听历史相关事件
      // 注意：不再监听 imageGenerated 事件，避免重复添加
      // 改为统一使用 messageUpdate 事件来处理新图片

      window.addEventListener("imageSelected", (e: any) => {
        this.setCurrentItem(e.detail.id);
      });

      // 监听显示模式切换
      window.addEventListener("historyDisplayModeChange", (e: any) => {
        this.setDisplayMode(e.detail.mode);
      });

      // 监听新消息添加 - 智能更新历史列表
      window.addEventListener("messageUpdate", (e: any) => {
        const { sessionId, message } = e.detail;
        // 只处理当前会话的消息
        if (
          window.sessionManager &&
          sessionId === window.sessionManager.currentSessionId
        ) {
          // 如果是AI消息且包含图片，添加到历史列表最前面
          if (message.role === "model" && message.imageUrl) {
            console.log(
              "🖼️ [UnifiedHistoryManager] New image detected, adding to history"
            );
            const session = window.sessionManager.getCurrentSession();
            const prevMsgIndex = session.messages.indexOf(message) - 1;
            const prevMsg =
              prevMsgIndex >= 0 ? session.messages[prevMsgIndex] : null;
            const prompt =
              prevMsg && prevMsg.role === "user"
                ? prevMsg.content
                : "Image generated";

            this.addHistoryItem({
              id:
                message.id ||
                `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              imageUrl: message.imageUrl,
              prompt: prompt,
              timestamp: message.timestamp || Date.now(),
              size: "1024x1024",
            });
          }
        }
      });

      // 监听会话切换事件
      window.addEventListener("sessionSwitch", (e) => {
        console.log("🖼️ [UnifiedHistoryManager] Session switch detected");
        this.renderSessionHistory();
      });

      // 清空历史按钮
      const clearBtn = document.getElementById("clear-history");
      if (clearBtn) {
        clearBtn.addEventListener("click", () => {
          this.clearHistory();
        });
      }

      // 导出全部按钮
      const exportBtn = document.getElementById("export-all");
      if (exportBtn) {
        exportBtn.addEventListener("click", () => {
          this.exportAll();
        });
      }

      // 等待 SessionManager 初始化后加载当前会话的历史
      this.waitForSessionManagerAndLoad();
    }

    // 等待 SessionManager 并加载历史
    waitForSessionManagerAndLoad() {
      const check = () => {
        if (window.sessionManager) {
          this.renderSessionHistory();
        } else {
          setTimeout(check, 100);
        }
      };
      check();
    }

    // 渲染当前会话的历史记录
    renderSessionHistory() {
      if (!window.sessionManager) {
        console.warn("⚠️ [UnifiedHistoryManager] SessionManager not available");
        return;
      }

      const session = window.sessionManager.getCurrentSession();
      if (!session) {
        console.warn("⚠️ [UnifiedHistoryManager] No current session");
        this.clearHistoryDisplay();
        return;
      }

      console.log(
        `🖼️ [UnifiedHistoryManager] Rendering history for session: ${session.id}`
      );
      console.log(`   Messages in session: ${session.messages.length}`);

      // 清空当前显示
      this.clearHistoryDisplay();

      // 从会话消息中提取所有带图片的记录
      const imagesWithPrompts = [];
      session.messages.forEach((msg, index) => {
        if (msg.role === "model" && msg.imageUrl) {
          // 找到对应的用户提示词（前一条消息）
          const prevMsg = index > 0 ? session.messages[index - 1] : null;
          const prompt =
            prevMsg && prevMsg.role === "user"
              ? prevMsg.content
              : "Image generated";

          imagesWithPrompts.push({
            id:
              msg.id ||
              `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            imageUrl: msg.imageUrl,
            prompt: prompt,
            timestamp: msg.timestamp || Date.now(),
            size: "1024x1024", // 默认大小
          });
        }
      });

      console.log(`   Found ${imagesWithPrompts.length} images in history`);

      // 渲染所有图片（从后往前遍历，最新的在左边）
      for (let i = imagesWithPrompts.length - 1; i >= 0; i--) {
        this.addHistoryItemToDOM(imagesWithPrompts[i]);
      }

      this.updateVisibility();

      // 如果有图片，自动选中第一张（最新的那张）
      // 使用 setTimeout 确保 BananaAIProcessor 的事件监听器已经设置好
      if (imagesWithPrompts.length > 0) {
        const firstImage = imagesWithPrompts[imagesWithPrompts.length - 1];
        console.log(
          `🎯 [UnifiedHistoryManager] Auto-selecting first image: ${firstImage.id}`,
          firstImage.imageUrl
        );
        setTimeout(() => {
          this.selectItem(firstImage.id);
          console.log("✅ [UnifiedHistoryManager] First image selected");
        }, 300);
      }
    }

    // 清空历史显示（不触发事件）
    clearHistoryDisplay() {
      this.items = [];
      this.currentId = null;
      if (this.galleryScroll) {
        this.galleryScroll.innerHTML = "";
      }
    }

    // 添加历史项目到 DOM（不添加到 items 数组，因为数据来自 session）
    addHistoryItemToDOM(data: any) {
      const { id, imageUrl, prompt, timestamp, size } = data;

      if (!this.template || !this.galleryScroll) return;

      // 克隆模板
      const clone = this.template.content.cloneNode(true);
      const item = clone.querySelector(".history-item") as HTMLElement;

      // 设置数据
      item.dataset.id = id;
      item.dataset.mode = this.displayMode;

      const img = item.querySelector("img") as HTMLImageElement;
      img.src = imageUrl;
      img.alt = `Generated image: ${prompt}`;

      const promptText = item.querySelector(".prompt-text");
      if (promptText) {
        promptText.textContent = prompt;
      }

      const metaTime = item.querySelector(".meta-time");
      if (metaTime) {
        metaTime.textContent = this.formatTime(timestamp);
      }

      const metaSize = item.querySelector(".meta-size");
      if (metaSize) {
        metaSize.textContent = size || "--";
      }

      // 绑定事件
      this.bindItemEvents(item, data);

      // 插入到列表
      this.galleryScroll.appendChild(item);

      // 更新内部数组
      this.items.push(data);
    }

    // 设置显示模式
    setDisplayMode(mode: string) {
      this.displayMode = mode;

      if (!this.galleryScroll) return;

      // 更新所有现有项目的显示模式
      const items = this.galleryScroll.querySelectorAll(".history-item");
      items.forEach((item) => {
        (item as HTMLElement).dataset.mode = mode;
      });

      // 调整容器样式
      if (mode === "detailed") {
        this.galleryScroll.style.flexDirection = "column";
        this.galleryScroll.style.alignItems = "stretch";
      } else {
        this.galleryScroll.style.flexDirection = "row";
        this.galleryScroll.style.alignItems = "center";
      }
    }

    // 添加历史项目
    addHistoryItem(data: any) {
      const { id, imageUrl, prompt, timestamp, size } = data;

      if (!this.template || !this.galleryScroll) return;

      // 克隆模板
      const clone = this.template.content.cloneNode(true);
      const item = clone.querySelector(".history-item") as HTMLElement;

      // 设置数据
      item.dataset.id = id;
      item.dataset.mode = this.displayMode;

      const img = item.querySelector("img") as HTMLImageElement;
      img.src = imageUrl;
      img.alt = `Generated image: ${prompt}`;

      const promptText = item.querySelector(".prompt-text");
      if (promptText) {
        promptText.textContent = prompt;
      }

      const metaTime = item.querySelector(".meta-time");
      if (metaTime) {
        metaTime.textContent = this.formatTime(timestamp);
      }

      const metaSize = item.querySelector(".meta-size");
      if (metaSize) {
        metaSize.textContent = size || "--";
      }

      // 绑定事件
      this.bindItemEvents(item, data);

      // 插入到列表开头
      this.galleryScroll.insertBefore(item, this.galleryScroll.firstChild);

      // 更新状态
      this.items.unshift(data);
      this.setCurrentItem(id);
      this.updateVisibility();

      // 滚动到最左边/顶部显示新项目
      if (this.displayMode === "thumbnail") {
        this.galleryScroll.scrollLeft = 0;
      } else {
        this.galleryScroll.scrollTop = 0;
      }
    }

    // 绑定项目事件
    bindItemEvents(item: HTMLElement, data: any) {
      const { id, imageUrl } = data;

      // 点击项目选择
      item.addEventListener("click", (e: Event) => {
        const target = e.target as HTMLElement;
        if (!target.closest(".overlay-btn") && !target.closest(".action-btn")) {
          this.selectItem(id);
        }
      });

      // 查看大图按钮
      const viewBtns = item.querySelectorAll(".view-btn");
      viewBtns.forEach((btn) => {
        btn.addEventListener("click", (e: Event) => {
          e.stopPropagation();
          this.viewImage(imageUrl);
        });
      });

      // 使用此图片按钮
      const useBtns = item.querySelectorAll(".use-btn, .use-btn-detailed");
      useBtns.forEach((btn) => {
        btn.addEventListener("click", (e: Event) => {
          e.stopPropagation();
          this.useImage(data);
        });
      });

      // 删除按钮
      const deleteBtns = item.querySelectorAll(".delete-btn");
      deleteBtns.forEach((btn) => {
        btn.addEventListener("click", (e: Event) => {
          e.stopPropagation();
          this.deleteItem(id);
        });
      });

      // 更多操作按钮
      const moreBtns = item.querySelectorAll(".more-btn");
      moreBtns.forEach((btn) => {
        btn.addEventListener("click", (e: Event) => {
          e.stopPropagation();
          this.showMoreActions(data);
        });
      });
    }

    // 选择项目
    selectItem(id: string) {
      // 检查DOM是否准备好
      if (!this.galleryScroll) {
        console.warn("DOM not ready, deferring selectItem");
        // 延迟执行
        setTimeout(() => this.selectItem(id), 100);
        return;
      }

      this.setCurrentItem(id);

      const item = this.items.find((item) => item.id === id);
      if (item) {
        // 触发图片选择事件
        window.dispatchEvent(
          new CustomEvent("historyImageSelected", {
            detail: item,
          })
        );
      }
    }

    // 设置当前项目
    setCurrentItem(id: string) {
      this.currentId = id;

      // 检查galleryScroll是否存在
      if (!this.galleryScroll) {
        console.warn("galleryScroll not found, skipping setCurrentItem");
        return;
      }

      // 更新UI状态
      const items = this.galleryScroll.querySelectorAll(".history-item");
      items.forEach((item) => {
        const isCurrentItem = (item as HTMLElement).dataset.id === id;
        item.classList.toggle("current", isCurrentItem);

        const status = item.querySelector(".item-status");
        if (status) {
          (status as HTMLElement).style.display = isCurrentItem
            ? "block"
            : "none";
        }
      });
    }

    // 查看图片
    viewImage(imageUrl: string) {
      const modal = document.getElementById("modal-overlay");
      const fullscreenModal = document.getElementById("fullscreen-modal");
      const fullscreenImage = document.getElementById(
        "fullscreen-image"
      ) as HTMLImageElement;

      if (modal && fullscreenModal && fullscreenImage) {
        fullscreenImage.src = imageUrl;
        (modal as HTMLElement).style.display = "flex";
        (fullscreenModal as HTMLElement).style.display = "flex";
      }
    }

    // 使用图片
    useImage(data: any) {
      // 触发使用图片事件
      window.dispatchEvent(
        new CustomEvent("useHistoryImage", {
          detail: data,
        })
      );
    }

    // 删除项目
    deleteItem(id: string) {
      if (confirm("Are you sure you want to delete this image?")) {
        // 从数组中移除
        this.items = this.items.filter((item) => item.id !== id);

        // 从DOM中移除
        if (this.galleryScroll) {
          const item = this.galleryScroll.querySelector(`[data-id="${id}"]`);
          if (item) {
            item.remove();
          }
        }

        // 如果删除的是当前项目，选择下一个
        if (this.currentId === id && this.items.length > 0) {
          this.setCurrentItem(this.items[0].id);
        }

        this.updateVisibility();

        // 触发删除事件
        window.dispatchEvent(
          new CustomEvent("historyItemDeleted", {
            detail: { id },
          })
        );
      }
    }

    // 显示更多操作
    showMoreActions(data: any) {
      // 这里可以显示更多操作菜单
      console.log("More actions for:", data);
    }

    // 清空历史
    clearHistory() {
      if (this.items.length === 0) return;

      if (
        confirm(
          "Are you sure you want to clear all history? This action cannot be undone."
        )
      ) {
        this.items = [];
        this.currentId = null;
        if (this.galleryScroll) {
          this.galleryScroll.innerHTML = "";
        }
        this.updateVisibility();

        // 触发清空事件
        window.dispatchEvent(new CustomEvent("historyCleared"));
      }
    }

    // 导出全部
    exportAll() {
      if (this.items.length === 0) {
        alert("No images to export");
        return;
      }

      // 这里可以实现批量导出功能
      console.log("Export all images:", this.items);
      alert(`Ready to export ${this.items.length} images`);
    }

    // 更新显示状态
    updateVisibility() {
      if (!this.galleryScroll || !this.galleryEmpty) return;

      const hasItems = this.items.length > 0;
      this.galleryScroll.style.display = hasItems ? "flex" : "none";
      this.galleryEmpty.style.display = hasItems ? "none" : "flex";
    }

    // 格式化时间
    formatTime(timestamp: number) {
      const date = new Date(timestamp);
      const now = new Date();
      const diff = now.getTime() - date.getTime();

      if (diff < 60000) {
        // Within 1 minute
        return "Just now";
      } else if (diff < 3600000) {
        // Within 1 hour
        return `${Math.floor(diff / 60000)}m ago`;
      } else if (diff < 86400000) {
        // Within 1 day
        return `${Math.floor(diff / 3600000)}h ago`;
      } else {
        return date.toLocaleDateString();
      }
    }

    // 获取历史数据
    getHistory(): any[] {
      return this.items;
    }

    // 获取当前项目
    getCurrentItem(): any {
      return this.items.find((item) => item.id === this.currentId);
    }

    // 切换显示模式
    toggleDisplayMode() {
      const newMode =
        this.displayMode === "thumbnail" ? "detailed" : "thumbnail";
      this.setDisplayMode(newMode);

      // 触发模式切换事件
      window.dispatchEvent(
        new CustomEvent("historyDisplayModeChanged", {
          detail: { mode: newMode },
        })
      );
    }
  }

  // 初始化统一历史管理器
  document.addEventListener("DOMContentLoaded", function () {
    (window as any).unifiedHistoryManager = new UnifiedHistoryManager();
  });
</script>
